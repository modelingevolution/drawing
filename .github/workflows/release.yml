name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only used if version_bump is custom)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get current version from git tags
      id: current_version
      run: |
        # Get the latest version from git tags
        LATEST_TAG=$(git tag -l "ModelingEvolution.Drawing/*" | sort -V | tail -1)
        
        if [ -n "$LATEST_TAG" ]; then
          # Extract version from tag (format: ModelingEvolution.Drawing/1.0.57.35)
          CURRENT_VERSION="${LATEST_TAG#ModelingEvolution.Drawing/}"
        else
          # Fallback: try to get from NuGet
          CURRENT_VERSION=$(curl -s "https://api.nuget.org/v3-flatcontainer/modelingevolution.drawing/index.json" | jq -r '.versions[-1]' 2>/dev/null || echo "")
        fi
        
        # If still no version, check the csproj file
        if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "null" ]; then
          CURRENT_VERSION=$(grep -oP '(?<=<AssemblyVersion>)[^<]+' Sources/ModelingEvolution.Drawing/ModelingEvolution.Drawing.csproj || echo "1.0.57.35")
        fi
        
        # Use known last version as absolute fallback
        if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "null" ]; then
          CURRENT_VERSION="1.0.57.35"
        fi
        
        echo "Current version: $CURRENT_VERSION (from tag: $LATEST_TAG)"
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Calculate next version
      id: next_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        VERSION_BUMP="${{ github.event.inputs.version_bump }}"
        CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
        
        if [ "$VERSION_BUMP" = "custom" ]; then
          if [ -z "$CUSTOM_VERSION" ]; then
            echo "Error: Custom version is required when version_bump is 'custom'"
            exit 1
          fi
          NEXT_VERSION="$CUSTOM_VERSION"
        else
          # Parse current version (assuming format like 1.0.30.26)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]:-1}"
          MINOR="${VERSION_PARTS[1]:-0}"
          PATCH="${VERSION_PARTS[2]:-0}"
          BUILD="${VERSION_PARTS[3]:-0}"
          
          case "$VERSION_BUMP" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              BUILD=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              BUILD=$((BUILD + 1))
              ;;
            patch)
              PATCH=$((PATCH + 1))
              BUILD=$((BUILD + 1))
              ;;
          esac
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH.$BUILD"
        fi
        
        echo "Next version: $NEXT_VERSION"
        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version in csproj
      run: |
        VERSION="${{ steps.next_version.outputs.next_version }}"
        cd Sources/ModelingEvolution.Drawing
        
        # Update all version-related properties
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION<\/AssemblyVersion>/" ModelingEvolution.Drawing.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION<\/FileVersion>/" ModelingEvolution.Drawing.csproj
        
        # Add Version tag if it doesn't exist
        if ! grep -q "<Version>" ModelingEvolution.Drawing.csproj; then
          sed -i "/<AssemblyVersion>/a\    <Version>$VERSION<\/Version>" ModelingEvolution.Drawing.csproj
        else
          sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" ModelingEvolution.Drawing.csproj
        fi
    
    - name: Commit version update
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add Sources/ModelingEvolution.Drawing/ModelingEvolution.Drawing.csproj
        git commit -m "Bump version to ${{ steps.next_version.outputs.next_version }}"
    
    - name: Create and push tag
      run: |
        VERSION="${{ steps.next_version.outputs.next_version }}"
        # Use the same tag format as existing tags
        git tag -a "ModelingEvolution.Drawing/$VERSION" -m "Release ModelingEvolution.Drawing v$VERSION"
        git push origin "ModelingEvolution.Drawing/$VERSION"
        git push origin HEAD
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: "ModelingEvolution.Drawing/${{ steps.next_version.outputs.next_version }}"
        name: "ModelingEvolution.Drawing v${{ steps.next_version.outputs.next_version }}"
        body: |
          ## ModelingEvolution.Drawing v${{ steps.next_version.outputs.next_version }}
          
          ### What's Changed
          - Updated Point<T>.Clamp implementation
          - Various improvements and bug fixes
          
          ### Installation
          ```bash
          dotnet add package ModelingEvolution.Drawing --version ${{ steps.next_version.outputs.next_version }}
          ```
          
          ### Features
          - Generic 2D math types (Point<T>, Vector<T>, Rectangle<T>, Size<T>)
          - Bezier curves and spline support
          - Polar coordinates and angle conversions (Degree, Radian, PolarPoint)
          - Matrix transformations
          - HSV color space
          - Clipper2 integration for polygon operations
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...v${{ steps.next_version.outputs.next_version }}
        draft: false
        prerelease: false
        generateReleaseNotes: true
    
    - name: Summary
      run: |
        echo "## Release Created Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version**: ${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ steps.next_version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: v${{ steps.next_version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "The tag has been created and pushed. This will automatically trigger the publish-nuget workflow to push the package to NuGet." >> $GITHUB_STEP_SUMMARY